#Move around aliases
##Move 1 to 5 directorys up
alias ..='cd ..'	#in zsh this is already available
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
##Change to the previous directory or the one before that and so on
alias 1='cd -'
alias 2='cd -2'
alias 3='cd -3'
alias 4='cd -4'
alias 5='cd -5'
alias 6='cd -6'
alias 7='cd -7'
alias 8='cd -8'
alias 9='cd -9'

#Search aliases
alias grep='grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox}'	#use colors and don't search in the repo-dirs
alias grepdir='grep -r'	#search a string (1st arg) in all files in a dir (2nd arg)

#Version control aliases
alias gitadd='git add'	#add a existing file given as arg to the repo
alias gitrm='git rm'	#remove a file, both from the repo and locally
func gitign(){ echo $1 >> .gitignore }	#remove a file from repo but keep it locally
alias gitbrm='git branch -d'	#delete a branch given as arg
alias gitbrmf='git branch -D'	#delete a branch given as arg even if it's not merged
alias gitbrrmm='git branch --no-color --merged | command grep -vE "^(\+|\*|\s*(master|develop|dev)\s*$)" | command xargs -n 1 git branch -d'	#deletes all merged branches except master, develop and dev
alias gitbrnew='git checkout -b'	#create and switch to the branch given as arg
alias gitch='git checkout'	#switch to the branch given as arg
alias gitcp='git cherry-pick'	#add a commit given as arg to the current branch
alias gitd='git diff'	#show the differences between states, see 'man git-diff' about usage
alias gitspush='git stash push'	#stash the current changes
alias gitspushm='git stash push -m'	#stash the current changes and give them a title (given as arg between quotes)
alias gitsls='git stash list'	#show a list of the stash changes
alias gitsrm='git stash remove'	#remove the latest stashed change
alias gitspop='git stash pop'	#use the latest stashed change
alias gitbl='git blame -b -w'	#show changes in a file	(1st arg)
alias gitcomo='git commit -a -m'	#commit changes with a one-line message (given as args between quotes)
alias gitcom='git commit -a -v'	#commit changes
function gitcomb() {	#commit changes on multiple branches (given as args) and jump back to the original
	local currentbranch=${$(git symbolic-ref --quiet HEAD)#refs/heads/} ; local branchA=$1 ; shift 1
	git stash push && git checkout $branchA && git stash pop && git commit -a -v || return 1
	for i in $@ ; do git checkout $i && git cherry-pick $currentbranch || echo "Committing on $i failed" ; done
	git checkout $currentbranch
}
alias gitlog='git log --stat --graph --decorate --all'	#log with messages of all branches and how they are related
alias gitlogd='git log --stat --graph --decorate --all -p'	#log with messages of all branches and how they are related and the changes in each commit
alias gitlogo='git log --oneline --decorate --all --graph --date=short'	#short overview of the git log
alias gitm='git merge'	#merge a branch given as arg into the current branch
alias gitmgh='git merge github/master'	#merge the master branch from the remote github into the current branch
alias gitmgl='git merge gitlab/master'	#merge the master branch from the remote gitlab into the current branch
alias gitmup='git merge upstream/master'	#merge the master branch from the remote upstream into the current branch
alias gitfix='git mergetool --tool=vimdiff'	#fix merge conflicts
alias gitundo='git reset --hard HEAD~'	#remove last commit
alias gitfa='git fetch --all'	#fetch new data from remotes
##Change GITHUBUSER and GITLABUSER to use the aliases below
GITHUBUSER=your_github_username
GITLABUSER=your_gitlab_username
alias gitremaddgh='git remote add github git@github.com:${GITHUBUSER}/${PWD##*/}.git && git fetch --all'	#adds a remote called github pointing to the repo on github and fetch it
alias gitremaddgl='git remote add gitlab git@gitlab.com:${GITLABUSER}/${PWD##*/}.git && git fetch --al'	#adds a remote called gitlab pointing to the repo on gitlab and fetch it
function gitremaddup() { git remote add upstream $1 && git fetch --all }	#adds a remote given as arg called upstream and fetch it
alias gitremrm='git remote rm'	#remove a remote given as arg
alias gitcl='git clone'	#clone a repo given as arg
func gitclgh() { git clone git@github.com:$GITHUBUSER/$1.git && cd $1 && gitremrm origin && ghremadd && gfa }	#Clone your github repo given as arg. This line needs to be placed after the ghremadd and gfa aliasses
func gitclgl() { git clone git@gitlab.com:$GITLABUSER/$1.git && cd $1 && gitremrm origin && glremadd && gfa }	#Clone your gitlab repo given as arg. This line needs to be placed after the glremadd and gfa aliasses
alias gitpushh='git push --set-upstream github ${$(git symbolic-ref --quiet HEAD)#refs/heads/}'	#create/update the current branch on github
alias gitpushl='git push --set-upstream gitlab ${$(git symbolic-ref --quiet HEAD)#refs/heads/}'	#create/update the current branch to gitlab
func gitpush() { for i in $(git remote show | grep -iv upstream ) ; do git push --set-upstream $i ${$(git symbolic-ref --quiet HEAD)#refs/heads/} ; done }	#create/update the branch on all remotes excepted upstream

#Fileinfo aliases
alias ls='ls --color=auto'	#list files with colors
alias la='ls -lA'	#list files with full info

#User switching aliases
alias become='sudo -i -u'	#become another user (1st arg)
alias su="sudo -i -u root"	#become root
alias root='sudo $(fc -ln -1)'	#run the previous command as root

#Commands to always run as root
alias apt-get='sudo apt-get'
alias apt='sudo apt'
alias aptitude='sudo aptitude'

#Check logs
alias logssh='cat /var/log/auth.log{,.1} | grep ssh | grep opened'	#show recent sshlogins
alias logsall='journalctl -n 500000 -f --no-hostname'	#print the 500000 latest systemd loglines and keep following them
alias logstoday='journalctl -S today -f --no-hostname'	#print all systemd loglines since midnight and keep  following them
alias logservice='journalctl -n 500000 -f --no-hostname -u '	#print the 500000 latest systemd loglines about the service provided as argument
alias logdocker='docker logs'	# print everything send to STDOUT and STDERR about the container providid as argument

#Other aliases
alias mkdir='mkdir -p'	#create dir (1st arg) and it's parents when they are not available
alias python='python3'	#specify a specific version of python (which is 3 in this case)

#turn the touchpad of your laptop on/off, might not work everywhere. xinput and perl need to be installed
alias touchpadon='xinput list | perl -ne '\''system $_ if(s/.*touchpad.*id=(\d+).*/xinput --enable $1/i)'\'
alias touchpadoff='xinput list | perl -ne '\''system $_ if(s/.*touchpad.*id=(\d+).*/xinput --disable $1/i)'\'

#docker
alias tor='docker run -d --rm -v /tmp/.X11-unix:/tmp/.X11-unix -v /dev/snd:/dev/snd -v /dev/shm:/dev/shm -v /etc/machine-id:/etc/machine-id:ro -e DISPLAY=unix:0 -v ~/Downloads:/usr/local/bin/Browser/Downloads --name tor-browser jess/tor-browser'	#launches tor browser, downloads will be saved in in ~/Downloads.
alias dockerx='docker run --rm -d -v /tmp/.X11-unix:/tmp/.X11-unix -v /dev/snd:/dev/snd -v /dev/shm:/dev/shm -e DISPLAY=unix:0'	#run a dockercontainer with gui based on a image (1st arg), the following args to run a specific command
alias dockeri='docker run --rm -it'	#run a interactive container based on a image (1st arg), the following args can be given to run a specific command
function dockerdev() {
	#1) open Dockerfile in the current directory in vim (to change it)
	#2) after closing it use it to build a image named after the current directory. If the 1st arg is "-n" the 2nd arg will be used as name instead
	#3) run a interactive container with x11 support that has the same name as the image but preceded with "dev_".
	#   If args (except the ones for naming the image) are passed they will overwrite the default command to run
	if [ ! -z $1 ] && [ $1 = "-n" ] ; then	#1) build a docker image, if the first arg is "-n" then the 2nd arg will be used as the imagename
		shift 1 ; if [ -z $1 ] ; then echo No image name provided ; return 1 ; fi ; local name=$1 ; shift 1
	else local name=${PWD##*/} ; fi	#if -n is not provided the image will be named after the current directory
	vim Dockerfile &&  #2) open the dockerfile in vim (so you change it)
	docker build -t $name . &&	# Build the image and give it the name given as the 1st arg
	docker run --rm -it -v /tmp/.X11-unix:/tmp/.X11-unix -v /dev/snd:/dev/snd -v /dev/shm:/dev/shm -e DISPLAY=unix:0 --name dev_$name $name $@ # Run it as testcontainer with the same name as the image preceded by dev_
	# The test container has been given X11 and shell support, commands to be ran can be given as extra args
}

#Debian-based (e.g. Ubuntu)
function indeb() { dpkg -S $(realpath $(which $1)) } #Shows the .deb package that installed the command given as arg

#Processes info
alias psall='ps --forest -eo user,ppid,pid,tty,pcpu,size,stime,args'	#show lots of info about all process while trying to maintain a tree
alias psmine='ps --forest -o ppid,pid,tty,pcpu,size,stime,args -u $(whoami)'	#show lots of info about all your process while trying to maintain a tree
##pstree and pstreet below show less info but are more readable. The name 'fun_pstree' is needed to fix infinite loops. You can just call 'pstree' for the same functionality
function pstreet() { pstree -UahpstS $@ | less }	#show browsable process tree and include threads, optional args can be given to only show childs of a specific pid or processes from a user (see 'man pstree')
function fun_pstree() { pstree -UahpsTS $@ | less }	#show browsable process tree, optional args can be given to only show childs of a specific pid or processes from a user (see 'man pstree')
alias pstree='fun_pstree'	#alias for fun_pstree (make sure this line is never placed before other lines containing the command 'pstree')

#Development
alias gccdebug="gcc -O0 -ggdb -Wall -Wextra -pedantic"

function ipmiproxy() ( sudo ssh -L 5900:$2:5900 -L 443:$2:443 -L 80:$2:80 $1 )
alias randomfilm='mount /mnt/targasmb ; cd /mnt/targasmb/filmen ;  ls | perl -e "\$i=0; while(<STDIN>) { unless(/srt\$/i) { chomp; push @filmen,\$_; \$i++; } }; \$film=\$filmen[int(rand(\$i))]; print \"###\$film###\\n\"; sleep 3; system \"mplayer \\\"\$film\\\"\""'	#Play a random movie in /mnt/targasmb that might not be mounted
