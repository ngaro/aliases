#Move around aliases
##Move 1 to 5 directorys up
alias ..='cd ..'	#in zsh this is already available
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
##Change to the previous directory or the one before that and so on
alias 1='cd -'
alias 2='cd -2'
alias 3='cd -3'
alias 4='cd -4'
alias 5='cd -5'
alias 6='cd -6'
alias 7='cd -7'
alias 8='cd -8'
alias 9='cd -9'

#Search aliases
alias grep='grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox}'	#use colors and don't search in the repo-dirs
alias grepdir='grep -r'	#search a string (1st arg) in all files in a dir (2nd arg)

#Version control aliases
alias grmold='git branch --no-color --merged | command grep -vE "^(\+|\*|\s*(master|develop|dev)\s*$)" | command xargs -n 1 git branch -d'	#deletes all merged branches except master, develop and dev
alias gblame='git blame -b -w'	#show changes in a file	(1st arg)
alias gcom='git commit -a -m'	#commit with a one-line message (args)
alias gcomm='git commit -a -v'	#commit
alias glog='git log --stat --graph --decorate --all'	#log with messages of all branches and how they are related
alias gdifflog='git log --stat --graph --decorate --all -p'	#log with messages of all branches and how they are related and the changes in each commit
alias gtinylog='git log --oneline --decorate --all --graph --date=short'	#short overview of the git log
alias gfix='git mergetool --tool=vimdiff'	#fix merge conflicts
alias gundo='git reset --hard HEAD~'	#remove last commit
alias gonline='git push --set-upstream origin ${$(git symbolic-ref --quiet HEAD)#refs/heads/}'	#Copy the branch to the origin (github/gitlab)
##Change GITHUBUSER and GITLABUSER to use the aliases below
GITHUBUSER=your_github_username
GITLABUSER=your_gitlab_username
alias ghremadd='git remote add github git@github.com:${GITHUBUSER}/${PWD##*/}.git'	#adds a remote called github pointing to the repo on github
alias glremadd='git remote add gitlab git@gitlab.com:${GITLABUSER}/${PWD##*/}.git'	#adds a remote called gitlab pointing to the repo on gitlab
alias ghlremadd='git remote add github git@github.com:${GITHUBUSER}/${PWD##*/}.git ; git remote add gitlab git@gitlab.com:${GITLABUSER}/${PWD##*/}.git'	#same as above for both github and gitlab
alias ghpush='git push --set-upstream github ${$(git symbolic-ref --quiet HEAD)#refs/heads/}'	#create/update the current branch on github
alias glpush='git push --set-upstream gitlab ${$(git symbolic-ref --quiet HEAD)#refs/heads/}'	#create/update the current branch to gitlab
alias ghlpush='git push --set-upstream github ${$(git symbolic-ref --quiet HEAD)#refs/heads/} ; git push --set-upstream gitlab ${$(git symbolic-ref --quiet HEAD)#refs/heads/}'	#same as above for both github and gitlab

#Fileinfo aliases
alias ls='ls --color=auto'	#list files with colors
alias la='ls -lA'	#list files with full info

#User switching aliases
alias become='sudo -i -u'	#become another user (1st arg)
alias su="sudo -i -u root"	#become root
alias root='sudo $(fc -ln -1)'	#run the previous command as root

#Commands to always run as root
alias apt-get='sudo apt-get'
alias apt='sudo apt'
alias aptitude='sudo aptitude'

#Check logs
alias logssh='cat /var/log/auth.log{,.1} | grep ssh | grep opened'	#show recent sshlogins
alias logsall='journalctl -n 500000 -f --no-hostname'	#print the 500000 latest systemd loglines and keep following them
alias logstoday='journalctl -S today -f --no-hostname'	#print all systemd loglines since midnight and keep  following them
alias logservice='journalctl -n 500000 -f --no-hostname -u '	#print the 500000 latest systemd loglines about the service provided as argument
alias logdocker='docker logs'	# print everything send to STDOUT and STDERR about the container providid as argument

#Other aliases
alias mkdir='mkdir -p'	#create dir (1st arg) and it's parents when they are not available

#turn the touchpad of your laptop on/off, might not work everywhere. xinput and perl need to be installed
alias touchpadon='xinput list | perl -ne '\''system $_ if(s/.*touchpad.*id=(\d+).*/xinput --enable $1/i)'\'
alias touchpadoff='xinput list | perl -ne '\''system $_ if(s/.*touchpad.*id=(\d+).*/xinput --disable $1/i)'\'

#docker
alias tor='docker run -d --rm -v /tmp/.X11-unix:/tmp/.X11-unix -v /dev/snd:/dev/snd -v /dev/shm:/dev/shm -v /etc/machine-id:/etc/machine-id:ro -e DISPLAY=unix:0 -v ~/Downloads:/usr/local/bin/Browser/Downloads --name tor-browser jess/tor-browser'	#launches tor browser, downloads will be saved in in ~/Downloads.
alias dockx='docker run --rm -d -v /tmp/.X11-unix:/tmp/.X11-unix -v /dev/snd:/dev/snd -v /dev/shm:/dev/shm -e DISPLAY=unix:0'	#run a dockercontainer with gui based on a image (1st arg), the following args to run a specific command
alias docki='docker run --rm -it'	#run a interactive container based on a image (1st arg), the following args can be given to run a specific command
function dockdev() {	#Develop Dockerfile
	local name=$1 ; shift 1;
	vim Dockerfile && # Open the dockerfile to edit it
	docker build -t $name . &&	# Build the image and give it the name given as the 1st arg
	docker run --rm -it -v /tmp/.X11-unix:/tmp/.X11-unix -v /dev/snd:/dev/snd -v /dev/shm:/dev/shm -e DISPLAY=unix:0 --name dev_$name $name $@ # Run it as testcontainer with the same name as the image preceded by dev_
	# The test container has been given X11 and shell support, commands to be ran can be given as extra args
}

#debianbased
function indeb() { dpkg -S $(realpath $(which $1)) } #Shows the .deb package that installed the command given as arg
